{"version":3,"file":"auth-7f7bf086.js","sources":["../../../../middleware/auth.ts"],"sourcesContent":["import { useAuthStore } from '~/store/auth';\r\n\r\nexport default defineNuxtRouteMiddleware(async (to, from) => {\r\n    const authStore = useAuthStore();\r\n    const token_access = useCookie('token_access');\r\n    const token_refresh = useCookie('token_refresh');\r\n\r\n\r\n\r\n    function parseJwt(token: string) {\r\n        const base64Url = token.split('.')[1];\r\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\r\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(''));\r\n        return JSON.parse(jsonPayload);\r\n    }\r\n    const token = token_access.value;\r\n    function isTokenExpired(token: string | null | undefined) {\r\n        if (!token) return true;\r\n\r\n        const decoded = parseJwt(token);\r\n        const currentTime = Date.now().valueOf() / 1000;\r\n        return decoded.exp <= currentTime;\r\n    }\r\n\r\n    function isValidToken(token: string) {\r\n        if (!token) return false;\r\n\r\n        const decoded = parseJwt(token);\r\n        const currentTime = Date.now().valueOf() / 1000;\r\n        return decoded.exp > currentTime;\r\n    }\r\n\r\n    async function refreshToken() {\r\n        if (isTokenExpired(token_refresh.value)) {\r\n\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const response = await useJsonPlaceholderData('/token/refresh/', {\r\n                method: 'POST',\r\n                body: {\r\n                    refresh: token_refresh.value\r\n                }\r\n            });\r\n\r\n            if (response.data && response.data.value && response.data.value.access) {\r\n                token_access.value = response.data.value.access;\r\n                return true;\r\n            } else {\r\n\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async function verifyToken(token: string | null | undefined) {\r\n        try {\r\n            const response = await useJsonPlaceholderData('/token/verify/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ token: token })\r\n            });\r\n\r\n            if (response.data.value === null) {\r\n\r\n                return false; // Пример, нужно адаптировать в зависимости от формата ответа сервера\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.log('Error verifying token:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    if (to.path === '/user/login') {\r\n        // Если пользователь уже аутентифицирован, перенаправляем его в личный кабинет\r\n        if (authStore.isAuthenticated || (token_access.value && isValidToken(token_access.value))) {\r\n            // Перенаправление аутентифицированного пользователя на главную страницу\r\n            return navigateTo('/user');\r\n        }\r\n        // Если пользователь не аутентифицирован, ничего не делаем\r\n        return;\r\n    }\r\n    // if (!authStore.isAuthenticated || !isValidToken(token_access.value)) {\r\n    if (!authStore.isAuthenticated) {\r\n\r\n        const tokenIsValid = await verifyToken(token_access.value);\r\n        if (!tokenIsValid) {\r\n            const isRefreshed = await refreshToken();\r\n\r\n            if (!isRefreshed) {\r\n                try {\r\n                    await $fetch('/api/logout');\r\n                } catch (error) {\r\n                    console.error('Ошибка при выходе из системы', error);\r\n                }\r\n                authStore.logout();\r\n                return navigateTo('/user/login');\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n})\r\n"],"names":["token","__executeAsync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGI,MAAA,OAA+B,0CAAA,OAAA,IAAA,SAAA;AAAA,MAAA,QAAA;AACzB,QAAA,YAAA;AACA,QAAA,eAAA,wBAAyC;AAI/C,QAAA,gBAAiC,UAAA,eAAA;AAC7B,WAAkBA,SAAAA,QAAAA;AACZ,UAAA,mBAAmB,MAAQ,GAAA,EAAA,CAAA;AAC3B,UAAA,SAAA,UAAiC,QAAA,MAAA,GAAA,EAAK,QAAQ,MAAM,GAAE;AACjD,UAAA,cAAc,mBAAgB,KAAS,MAAE,EAAG,MAAA,EAAQ,EAAA,IAAA,SAAA,GAAA;AAC9D,aAAO,OAAG,OAAA,EAAA,WAAA,CAAA,EAAA,SAAA,EAAA,GAAA,MAAA,EAAA;AAAA,IACX,CAAO,EAAA,KAAA,EAAA,CAAA;AACX,WAAA,KAAA,MAAA,WAAA;AAAA,EACA;eAC0D;AACtD,WAAKA,eAAAA,QAAAA;AAAc,QAAA,CAAA;AAEb,aAAA;AACN,UAAM,UAAc,SAAK,MAAM;AAC/B,UAAA,cAAsB,KAAA,IAAA,EAAA,QAAA,IAAA;AAC1B,WAAA,QAAA,OAAA;AAAA,EAEA;AACI,WAAKA,aAAAA,QAAAA;AAAc,QAAA,CAAA;AAEb,aAAA;AACN,UAAM,UAAc,SAAK,MAAM;AAC/B,UAAA,cAAqB,KAAA,IAAA,EAAA,QAAA,IAAA;AACzB,WAAA,QAAA,MAAA;AAAA,EAEA;AACQ,iBAAA,eAA6B;AAEtB,QAAA,eAAA,cAAA,KAAA,GAAA;AACX,aAAA;AAAA,IAEI;AACM,QAAA;AAA2D,YACrD,WAAA,MAAA,uBAAA,mBAAA;AAAA,QACR,QAAM;AAAA,QAAA;UAEN,SAAA,cAAA;AAAA,QACH;AAAA,MAED,CAAI;AACa,UAAA,SAAA,QAAA,SAAiB,KAAA,SAAW,SAAA,KAAA,MAAA,QAAA;AAClC,qBAAA,QAAA,SAAA,KAAA,MAAA;AACJ,eAAA;AAAA,MAEH,OAAO;AACX,eAAA;AAAA;IAEA,SAAA,OAAiB;AACV,cAAA,IAAA,KAAA;AACX,aAAA;AAAA,IACJ;AAAA,EAEA;AACQ,iBAAA,YAAA,QAAA;AACM,QAAA;AAA0D,YACpD,WAAA,MAAA,uBAAA,kBAAA;AAAA,QACR,QAAS;AAAA,QAAA,SACW;AAAA,UACpB,gBAAA;AAAA;QAEH,MAAA,KAAA,UAAA,EAAA,OAAA,OAAA,CAAA;AAAA,MAED,CAAI;AAEO,UAAA,SAAA,KAAA,UAAA,MAAA;AACX,eAAA;AAAA,MAEO;aACF;AAAA,IACG,SAAA;AACD,cAAA,IAAA,0BAAA,KAAA;AACX,aAAA;AAAA,IACJ;AAAA,EAGI;AAEA,MAAA,YAAc,eAAoB;AAE9B,QAAA,6BAAyB,aAAA,SAAA,aAAA,aAAA,KAAA,GAAA;AAC7B,aAAA,WAAA,OAAA;AAAA,IAEA;AACJ;AAAA,EAEI;AAEA,MAAA,CAAA,UAAqB,iBAAM;AAC3B,UAAmB,gBAAA,CAAA,QAAA,SAAA,IAAAC,aAAA,MAAA,YAAA,aAAA,KAAA,CAAA,GAAA,SAAA,MAAA,QAAA,UAAA,GAAA;AACT,QAAA,CAAA,cAAA;AAEN,YAAkB,eAAA,CAAA,QAAA,SAAA,IAAAA,aAAA,MAAA,aAAA,CAAA,GAAA,SAAA,MAAA,QAAA,UAAA,GAAA;AACV,UAAA,CAAA,aAAA;AACA,YAAM;;mBACM,SAAA,IAAAA,aAAA,MAAA,OAAA,aAAA,CAAA,GAAA,MAAA,QAAA,UAAA;AAAA;AAAA,QACJ,SAAA,OAAM;AAClB,kBAAA,MAAA,gCAAA,KAAA;AAAA,QACA;AACA;AAGJ,eAAA,WAAA,aAAA;AAAA,MACJ;AAAA,IACJ;AAAA,EAIH;;"}